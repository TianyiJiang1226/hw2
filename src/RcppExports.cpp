// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// firstl
double firstl(NumericVector x, double theta);
RcppExport SEXP _hw2_firstl(SEXP xSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(firstl(x, theta));
    return rcpp_result_gen;
END_RCPP
}
// secondl
double secondl(NumericVector x, double theta);
RcppExport SEXP _hw2_secondl(SEXP xSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(secondl(x, theta));
    return rcpp_result_gen;
END_RCPP
}
// bisection
NumericVector bisection(NumericVector x, double bound);
RcppExport SEXP _hw2_bisection(SEXP xSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(bisection(x, bound));
    return rcpp_result_gen;
END_RCPP
}
// newton
NumericVector newton(NumericVector x, double bound);
RcppExport SEXP _hw2_newton(SEXP xSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(newton(x, bound));
    return rcpp_result_gen;
END_RCPP
}
// fish
double fish(NumericVector x, double theta);
RcppExport SEXP _hw2_fish(SEXP xSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(fish(x, theta));
    return rcpp_result_gen;
END_RCPP
}
// fisher
NumericVector fisher(NumericVector x, double bound);
RcppExport SEXP _hw2_fisher(SEXP xSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(fisher(x, bound));
    return rcpp_result_gen;
END_RCPP
}
// secant
NumericVector secant(NumericVector x, double bound);
RcppExport SEXP _hw2_secant(SEXP xSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(secant(x, bound));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hw2_firstl", (DL_FUNC) &_hw2_firstl, 2},
    {"_hw2_secondl", (DL_FUNC) &_hw2_secondl, 2},
    {"_hw2_bisection", (DL_FUNC) &_hw2_bisection, 2},
    {"_hw2_newton", (DL_FUNC) &_hw2_newton, 2},
    {"_hw2_fish", (DL_FUNC) &_hw2_fish, 2},
    {"_hw2_fisher", (DL_FUNC) &_hw2_fisher, 2},
    {"_hw2_secant", (DL_FUNC) &_hw2_secant, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_hw2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
